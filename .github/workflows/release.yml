name: Release CI

on:
  push:
    branches:
      - 'main'

jobs:
  job1:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v2
    - name: Setup Github credentials
      uses: de-vri-es/setup-git-credentials@v2
      with:
        credentials: ${{secrets.GIT_CREDENTIALS}}
    - name: Update dev_build tag and release (dev release only)
      env:
        GITHUB_USER: gabrielbmotta
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email gabrielbenmotta@gmail.com
        git config --global user.name $GITHUB_USER
        # Delete current dev_build release remotely.
        # Must be done before deleting the remote tag associated with the dev_build release.
        # This prevents a draft release to be left over after we delete the tag remotely.
        hub release delete dev_build
        # Delete current tag remotely
        git push origin :refs/tags/dev_build
        # Change dev_build tag to point to newest commit
        git tag dev_build -f -a -m "Development Builds"
        # Send the new tag
        git push -f --tag
        # Create new dev_build release
        hub release create -m "Development Builds" dev_build --prerelease

  job2:
    needs: job1
    name: Release Builds
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Download core utils for Mac
        if: (matrix.os == 'macos-latest')
        run: brew install coreutils

      - name: Build project
        run: ./project --build

      - name: Run release
        run: |
          ./resources/scripts/package_lib libfiff out/Release/libs/*fiff* src/lib/fiff
          echo "BUILD_TAR_NAME=$(find . -name *.tar.gz)" >> $GITHUB_ENV
          
      - name: Deploy binaries with dev release on Github
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BUILD_TAR_NAME }}
          tag: dev_build
          overwrite: true

  job3:
    needs: job1
    name: Header only
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Combine files
        run: |
          ./resources/scripts/header_only_lib src/lib/fiff fiff.hpp
          echo "HEADER_LIB_NAME=$(find . -name *.hpp)" >> $GITHUB_ENV

      - name: Deploy header lib with dev release on Github
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.HEADER_LIB_NAME }}
          tag: dev_build
          overwrite: true

  # job4:
  #   name: Doc PDF
  #   needs: job1
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v2
  #     - name : Install Doxygen and pdflatex
  #       run: |
  #         sudo apt-get install doxygen texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra
  #     - name: Run Doxygen
  #       run: |
  #         cd doc
  #         doxygen Doxyfile
  #         make -Clatex
  #         mv latex/refman.pdf .
  #         mv refman.pdf fiff_docu.pdf
  #     - name: Deploy pdf manual
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: doc/fiff_docu.pdf
  #         tag: dev_build
  #         overwrite: true
  #
